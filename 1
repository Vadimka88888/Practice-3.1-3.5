// Сортировка выбором С++

#include <iostream>  // Подключаем библиотеку для ввода/вывода
#include <vector>    // Подключаем библиотеку для работы с динамическими массивами
using namespace std; // Используем стандартное пространство имен

// Функция сортировки выбором
// Принимает ссылку на вектор (массив) целых чисел
void selectionSort(vector<int>& arr) {
    int n = arr.size(); // Получаем размер массива и сохраняем в переменную n
    
    // Внешний цикл: проходим по всем элементам массива от начала до предпоследнего
    // i - текущая позиция, куда мы будем ставить найденный минимальный элемент
    for (int i = 0; i < n - 1; i++) {
        // Предполагаем, что минимальный элемент находится на текущей позиции i
        int minIndex = i;
        
        // Внутренний цикл: ищем минимальный элемент в неотсортированной части
        // Начинаем поиск со следующего элемента после i (i + 1)
        for (int j = i + 1; j < n; j++) {
            // Сравниваем текущий элемент с предполагаемым минимальным
            if (arr[j] < arr[minIndex]) {
                // Если нашли элемент меньше, обновляем индекс минимального элемента
                minIndex = j;
            }
        }
        
        // После завершения внутреннего цикла нашли минимальный элемент в неотсортированной части
        // Меняем местами найденный минимальный элемент с текущим элементом i
        // Используем стандартную функцию swap для обмена значений
        swap(arr[i], arr[minIndex]);
    }
}

// Вспомогательная функция для вывода массива на экран
void printArray(const vector<int>& arr) {
    // Проходим по всем элементам массива
    for (int i = 0; i < arr.size(); i++) {
        // Выводим каждый элемент через пробел
        cout << arr[i] << " ";
    }
    // Переходим на новую строку после вывода всего массива
    cout << endl;
}

// Главная функция - точка входа в программу
int main() {
    // Создаем и инициализируем тестовый массив
    vector<int> testArray = {64, 25, 12, 22, 11};
    
    // Выводим исходный массив
    cout << "Исходный массив: ";
    printArray(testArray);
    
    // Вызываем функцию сортировки выбором
    selectionSort(testArray);
    
    // Выводим отсортированный массив
    cout << "Отсортированный массив: ";
    printArray(testArray);
    
    // Возвращаем 0, указывая на успешное завершение программы
    return 0;
}
