// Сортировка слиянием
import java.util.Arrays; // Импортируем класс для работы с массивами

public class MergeSort {

    // Основной метод сортировки слиянием
    // Принимает массив целых чисел для сортировки
    public static void mergeSort(int[] arr) {
        // Базовый случай: если массив пустой или содержит один элемент - уже отсортирован
        if (arr.length <= 1) {
            return;
        }
        
        // Находим середину массива
        int mid = arr.length / 2;
        
        // Создаем левый подмассив - копируем элементы от начала до середины
        int[] left = Arrays.copyOfRange(arr, 0, mid);
        // Создаем правый подмассив - копируем элементы от середины до конца
        int[] right = Arrays.copyOfRange(arr, mid, arr.length);
        
        // Рекурсивно сортируем левую половину
        mergeSort(left);
        // Рекурсивно сортируем правую половину
        mergeSort(right);
        
        // Сливаем отсортированные половины обратно в исходный массив
        merge(arr, left, right);
    }
    
    // Метод для слияния двух отсортированных массивов
    // Принимает: исходный массив и два отсортированных подмассива для слияния
    private static void merge(int[] arr, int[] left, int[] right) {
        // i - индекс для левого массива, j - для правого, k - для результирующего
        int i = 0, j = 0, k = 0;
        
        // Пока есть элементы в обоих массивах
        while (i < left.length && j < right.length) {
            // Сравниваем текущие элементы левого и правого массивов
            if (left[i] <= right[j]) {
                // Если элемент из левого массива меньше или равен, помещаем его в результат
                arr[k] = left[i];
                i++; // Переходим к следующему элементу в левом массиве
            } else {
                // Если элемент из правого массива меньше, помещаем его в результат
                arr[k] = right[j];
                j++; // Переходим к следующему элементу в правом массиве
            }
            k++; // Переходим к следующей позиции в результирующем массиве
        }
        
        // Копируем оставшиеся элементы из левого массива (если есть)
        while (i < left.length) {
            arr[k] = left[i];
            i++;
            k++;
        }
        
        // Копируем оставшиеся элементы из правого массива (если есть)
        while (j < right.length) {
            arr[k] = right[j];
            j++;
            k++;
        }
    }
    
    // Вспомогательный метод для вывода массива
    public static void printArray(int[] arr) {
        for (int value : arr) {
            System.out.print(value + " ");
        }
        System.out.println();
    }
    
    // Основной метод для тестирования
    public static void main(String[] args) {
        int[] array = {38, 27, 43, 3, 9, 82, 10};
        
        System.out.print("Исходный массив: ");
        printArray(array);
        
        // Вызываем сортировку слиянием
        mergeSort(array);
        
        System.out.print("Отсортированный массив: ");
        printArray(array);
    }
}
